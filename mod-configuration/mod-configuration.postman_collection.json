{
	"info": {
		"_postman_id": "a97c4bf8-cbbc-43d3-9716-2553eb85c8c2",
		"name": "mod-configuration",
		"description": "/configurations/entries\n/configurations/entries/{entryid}\n/configurations/audit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"description": null,
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "schemas",
			"description": null,
			"item": [
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "audit.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d453552-a593-41c9-9231-3699a471bbaf",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_audit\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_audit_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/_schemas/{{schema_audit}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"_schemas",
								"{{schema_audit}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "audits.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541faecd-f1ed-4bb7-abd0-370d2428adfd",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_audits\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_audits_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/_schemas/{{schema_audits}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"_schemas",
								"{{schema_audits}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "kv_configuration.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11ed8f61-a01e-4409-9ac9-0a802aa8c10b",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_kv_configuration\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_kv_configuration_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/_schemas/{{schema_kv_configuration}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"_schemas",
								"{{schema_kv_configuration}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "kv_configurations.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "028e0ec1-4c1a-4123-85b2-d99d42f655e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_kv_configurations\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_kv_configurations_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/_schemas/{{schema_kv_configurations}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"_schemas",
								"{{schema_kv_configurations}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "library.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f27faf72-42b6-4029-9786-c1caf55c0cf0",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_library\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_library_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/_schemas/{{schema_library}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"_schemas",
								"{{schema_library}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "resultInfo.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53ce15d2-e5f7-48ca-9ea4-9f5a55d3f1d7",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_resultInfo\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_resultInfo_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_resultInfo}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_resultInfo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/configurations/entries",
			"description": "",
			"item": [
				{
					"name": "http://{{url}}:9130/configurations/entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a38492b-d387-4bb8-903a-4e7b5da2dc92",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"kv_configuration.schema\", JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_kv_configurations_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db4ce63a-980b-4c8b-8f02-8fc888e7fdc0",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"newconfigurationid\", response.id);",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"module\": \"CIRCULATION\",\r\n  \"configName\": \"validation_rules\",\r\n  \"code\": \"PATRON_RULE\",\r\n  \"description\": \"for patrons\",\r\n  \"default\": true,\r\n  \"enabled\": true,\r\n  \"value\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/audit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24f6fcd0-f443-4fa4-a7a3-cd53318d0794",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"kv_configuration.schema\", JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")));",
									"    tv4.addSchema(\"audit.schema\", JSON.parse(pm.environment.get(\"schema_audit_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_audits_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains added configuration\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"newconfigurationid\"));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/audit?limit=100&query=(id ={{newconfigurationid}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"audit"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "query",
									"value": "(id ={{newconfigurationid}})"
								},
								{
									"key": null,
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef4d3bec-7730-435c-8291-ed9d90567efa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ac42f722-91af-42ab-bb3e-8c6f66532319",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "/configurations/entries/{id}",
			"description": "",
			"item": [
				{
					"name": "http://{{url}}:9130/configurations/entries/{{newconfigurationid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30da9839-4e1e-4fd5-8211-7a566bbb93e4",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"Response contains added configuration\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"newconfigurationid\"));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{newconfigurationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{newconfigurationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/entries/{{newconfigurationid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaffe205-07bb-4eb3-809f-b3dda177e25b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"module\": \"CIRCULATION\",\r\n  \"configName\": \"validation_rules\",\r\n  \"code\": \"PATRON_RULE\",\r\n  \"description\": \"for fs patrons\",\r\n  \"default\": false,\r\n  \"enabled\": true,\r\n  \"value\": \"this is my updated value\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{newconfigurationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{newconfigurationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/entries/{{newconfigurationid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b87491e1-eb53-49f3-9647-4c17d09448d3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{newconfigurationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{newconfigurationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/entries/foo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a4de6e-9da2-421b-84d2-68cb80c82f1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"foo"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05c4a580-03d8-461b-a033-fa9f22312c1b",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "/configurations/audit",
			"description": "",
			"item": [
				{
					"name": "http://{{url}}:9130/configurations/audit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b78f8981-0686-4968-a273-5ca5e86410e9",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"kv_configuration.schema\", JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")));",
									"    tv4.addSchema(\"audit.schema\", JSON.parse(pm.environment.get(\"schema_audit_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_audits_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains added configuration\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"newconfigurationid\"));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/audit?limit=100&query=(id ={{newconfigurationid}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"audit"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "query",
									"value": "(id ={{newconfigurationid}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/audit - query by module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fc3fae3-c086-4d13-8f7a-630d54b03e07",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function() {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"kv_configuration.schema\", JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")));",
									"    tv4.addSchema(\"audit.schema\", JSON.parse(pm.environment.get(\"schema_audit_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_audits_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function() {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function() {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function() {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/audit?query=module=SETTINGS",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"audit"
							],
							"query": [
								{
									"key": "query",
									"value": "module=SETTINGS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "http://{{url}}:9130/configurations/audit - query by orig_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7441c246-d8e0-4002-aff6-90508bb1189a",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"kv_configuration.schema\", JSON.parse(pm.environment.get(\"schema_kv_configuration_content\")));",
									"    tv4.addSchema(\"audit.schema\", JSON.parse(pm.environment.get(\"schema_audit_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_audits_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/audit?query=orig_id={{newconfigurationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"audit"
							],
							"query": [
								{
									"key": "query",
									"value": "orig_id={{newconfigurationid}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5270e20f-3697-4204-9f69-445abd4f3842",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "da8e3a38-ce72-4e7f-bb25-7909a0fbf3e7",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8d15c8d7-5023-4d2d-9cef-c04a9da5af4f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d0f8420a-14e6-4375-a429-157072f6e5e9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "042b85bd-75de-4bf9-a942-372d395722b1",
			"key": "mod_name",
			"value": "mod-configuration",
			"type": "string",
			"description": ""
		},
		{
			"id": "3f1a3d02-2ef2-4e82-a6e9-91d82904e21f",
			"key": "mod_version",
			"value": "v4.0.3",
			"type": "string",
			"description": ""
		},
		{
			"id": "bb8a6a15-4c36-4d90-b243-c93e5a52fde4",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string",
			"description": ""
		},
		{
			"id": "ff539ff5-f145-44ab-9f8a-9a5c942cd29a",
			"key": "schema_audit",
			"value": "audit.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "9140119f-af17-4359-9c32-a5a825517f37",
			"key": "schema_audits",
			"value": "audits.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "a275f0ea-5691-457d-b038-49225a189b9a",
			"key": "schema_kv_configuration",
			"value": "kv_configuration.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "ea01e3cc-f0f4-4721-a7d5-b6752fc94e32",
			"key": "schema_kv_configurations",
			"value": "kv_configurations.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "fd6350c6-5197-42de-80d8-2dee411eeea3",
			"key": "schema_library",
			"value": "library.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "84f32900-39dc-46c9-b296-46249228c6ef",
			"key": "schema_resultInfo",
			"value": "resultInfo.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "e02d3fda-f0d2-49df-befd-acd7d0a41a63",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "c8c79abe-9f68-4feb-bf47-845c703d36f8",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "6c608579-5fa0-417f-9ab3-11a999bdf545",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string",
			"description": ""
		},
		{
			"id": "54cc54fb-4f9d-4f1b-8be3-88ea1fa0d77e",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string",
			"description": ""
		}
	]
}