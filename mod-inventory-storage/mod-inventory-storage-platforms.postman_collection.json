{
	"info": {
		"_postman_id": "36ec00f6-20e5-48c4-8175-87aed4c06f9d",
		"name": "mod-inventory-storage-platforms",
		"description": "Tests for mod-inventory-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "platforms",
			"description": "Tests for the /platforms end point.",
			"item": [
				{
					"name": "/platforms - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "daba9c28-606a-4952-b399-88207fe12dde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64a3f9eb-fa3e-4680-9774-9e7e7e3192f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"platform.json\", pm.variables.get(\"platform.schema\"));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platforms.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Test listing platforms"
					},
					"response": []
				},
				{
					"name": "/platforms - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bbeea6bb-1b38-4707-aeed-50cdd8d4113b",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-platforms');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3bf31cf-c9d7-4bdc-a82b-5f9417a46c3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Check for auth token not set"
					},
					"response": []
				},
				{
					"name": "/platforms - 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eafeeacc-37b5-4546-99ad-1b168cbc7168",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba018443-8e95-4e54-a96c-83bc70bcdc63",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "List platforms with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/platforms?limit=-1 - 400 (negative limit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95363aa7-4c73-4cc8-a75e-f034de8f4f98",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - negative limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/platforms?offset=-1 - 400 (negative offset)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03492b68-4c19-42a0-ac92-4d6c112b6a58",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - negative offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative offset"
					},
					"response": []
				},
				{
					"name": "/platforms?limit=-2147483649 - 400 (limit exceeds min int)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8655569-ed51-4a38-9cdb-ef4ac0400bc5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/platforms?offset=-2147483649 - 400 (limit exceeds min offset)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1dabb328-cff3-4a56-8ac6-706f16c2d47b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?offset=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for offset less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/platforms?limit=2147483648 - 400 (limit exceeds max int)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "627d92ac-5472-4cf3-91d1-2397e1403143",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - limit greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/platforms?offset=2147483648 - 400 (offset exceeds max int)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce75e96-36a7-4e71-9bb0-5c52d7253abb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - offset greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for offset greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/platforms?query=foo* - 400 (bad CQL: currently a 500)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a74c94ba-7067-43a5-87c7-e833869ddb8b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad CQL\", function() {",
									"    pm.response.to.have.status(400); // Should be 400!",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						},
						"description": "400 test for some weird query. Note: this test will fail until [MODINVSTOR-76](https://issues.folio.org/projects/MODINVSTOR/issues/MODINVSTOR-76) is fixed."
					},
					"response": []
				},
				{
					"name": "/platforms?lang= - 400 (empty lang)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f71cf43-1400-41f5-b08c-25fa010e4143",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - empty lang\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						},
						"description": "400 test for no lang"
					},
					"response": []
				},
				{
					"name": "/platforms?lang=A1 - 400 (bad lang syntax)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64184f81-0134-4c68-954d-fd24207f80ca",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang regex\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "400 test for lang regex"
					},
					"response": []
				},
				{
					"name": "/platforms - 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8005bea-2ab4-4ccb-a3a2-695d6a11b6d4",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('platformUUID', uuid.v4());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cfbfafa-0278-4943-85a1-f3112c605ce4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platform.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"platformUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test platform: \" + pm.environment.get(\"platformUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform"
					},
					"response": []
				},
				{
					"name": "/platforms - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5f1e2d3-f9a8-49cb-87d0-91569e9fa80a",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-platforms');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0789b8d7-9eef-4408-bd72-9f560d40a02d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with an invalid token"
					},
					"response": []
				},
				{
					"name": "/platforms - 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9cf20230-b2dc-40c0-878b-2fd99ef41914",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a3943233-5f10-4c00-98a3-a7054c92cedd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/platforms - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c3b636f-67fb-44bd-980e-6ec425ef8e89",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"422 test\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
									"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with an empty body"
					},
					"response": []
				},
				{
					"name": "/platforms - 400 (bad JSON)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69886924-2ba1-40d2-99a9-25878557c868",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad JSON\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with a bad JSON body"
					},
					"response": []
				},
				{
					"name": "/platforms - 400 (bad \"lang\" query arg)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5d4a0bf-220b-4c47-a46b-56586901f94d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad lang\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Create a new platform with a bad lang query argument"
					},
					"response": []
				},
				{
					"name": "/platforms - 400 (ID already exists)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ad118b-553f-498a-bffe-8f2b1e9de596",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID already exists\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with an ID that already exists"
					},
					"response": []
				},
				{
					"name": "/platforms - 400 (invalid ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fe3af58-ac52-476c-81b9-ef17f2c43ccf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID in not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"12345\",\n\t\"name\": \"Test platform: 12345\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							]
						},
						"description": "Create a new platform with an invalid ID"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ff8e6f3-9b99-4cb2-9de8-b31a3fee9f40",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platform.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"platformUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test platform: \" + pm.environment.get(\"platformUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Return an existing platform"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "951da1ac-e479-4d56-9048-2103010d39ca",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-platforms');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "879c0e66-09fc-4e02-8108-011004498ac1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Return an existing platform using an invalid token"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c71dd00-23e6-4618-8469-15bdb49884c8",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e579d51-f38e-4d8e-8c31-c75d658dfb2e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Return an existing platform using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/platforms/12345 - 400 (invalid ID: currently 404)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(404); // Should be 400!",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"12345"
							]
						},
						"description": "Return an existing platform using an invalid UUID on the URL. I posit that the response status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-78](https://issues.folio.org/browse/MODINVSTOR-78)."
					},
					"response": []
				},
				{
					"name": "/platforms?limit=100 - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "545cd10d-31d8-4efc-b44a-a237ac404d4d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"platform.json\", pm.variables.get(\"platform.schema\"));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platforms.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for added platform\", function() {",
									"   pm.expect(pm.response.json().platforms).to.be.an('array').to.include.deep.members([{id: pm.environment.get(\"platformUUID\"), name: \"Test platform: \" + pm.environment.get(\"platformUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing platforms to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 platforms already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Update an existing platform"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "015fbdf5-c700-4a29-a050-eb4eb65d5c56",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-platforms');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9cc6cbee-df33-4110-b371-bfd1b1591be1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Update an existing platform using an invalid token"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7ad0d74-35dd-4835-a719-d836ffea674e",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6dfec8a3-f0e4-4e95-a254-bc541bf824de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Update an existing platform using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 400 (inconsistent IDs: currently a 204)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fca7874a-6688-427f-9fcb-05a87a42266a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - IDs don't match\", function() {",
									"    pm.response.to.have.status(204); // Should be 400!",
									"    //pm.response.to.have.body(); // no body with a 204 :(",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Update an existing platform with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-77](https://issues.folio.org/browse/MODINVSTOR-77)."
					},
					"response": []
				},
				{
					"name": "/platforms/12345 - 400 (invalid ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58b51bb7-9d03-42cf-a598-a9f0fa8558a7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"12345"
							]
						},
						"description": "Update an existing platform with an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId}?lang=A1 - 400 (bad \"lang\" query arg)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96b65564-f7b2-4318-92a8-cf232790b679",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Test updating a platform with a bad lang query argument."
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c50bec9-977a-4602-9c13-3400cb7a97ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platform.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"platformUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test platform - modified: \" + pm.environment.get(\"platformUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Return an existing platform"
					},
					"response": []
				},
				{
					"name": "/platforms?limit=100 - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ab825b1-2f2c-4745-a0b5-e2bc1d4c338e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"platform.json\", pm.variables.get(\"platform.schema\"));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platforms.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted platform\", function() {",
									"   pm.expect(pm.response.json().platforms).to.be.an('array').to.include.deep.members([{id: pm.environment.get(\"platformUUID\"), name: \"Test platform - modified: \" + pm.environment.get(\"platformUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing platforms to ensure modified item is in the list. Need a higher limit than 10 in case there are more than 10 platforms already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 204",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9de69792-028e-4c29-a837-e32af804f7de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Delete an existing platform"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49915d8b-d64d-4dbb-a70d-1160fdb15a9f",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-platforms');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bab3d4c-891f-457d-999f-a5cc7205a1cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Delete an existing platform using an invalid token"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2cf6d8ab-cfc1-4f63-a3e7-42682343d5ea",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a238c746-921d-4295-ae4f-2720a92b47bf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken-platforms\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Delete an existing platform using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c172ea20-479d-4aea-b1ee-5ac8e6b02c90",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Delete a platform using an already deleted platform ID"
					},
					"response": []
				},
				{
					"name": "/platforms/12345 - 400 (invalid ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3effed9c-428e-460e-885a-69cd51515229",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"12345"
							]
						},
						"description": "Delete a platform using an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 400 (bad \"lang\" query arg)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06388416-a482-4293-8df8-bd685b2663b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Delete a platform passing an invalid lang query paramater"
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e7305f2-4a6f-41fc-9b79-f06be199e868",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Return a deleted platform"
					},
					"response": []
				},
				{
					"name": "/platforms?limit=100 - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f24e479d-7655-4939-935d-da7360d73bdb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"platform.json\", pm.variables.get(\"platform.schema\"));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"platforms.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted platform\", function() {",
									"   pm.expect(pm.response.json().platforms).to.be.an('array').to.not.include.deep.members([{id: pm.environment.get(\"platformUUID\"), name: \"Test platform - modified: \" + pm.environment.get(\"platformUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing platforms to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 platforms already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/platforms/{platformId} - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e46b7f39-f6bf-4e8c-b3fc-500c28eb8b0b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-platforms}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{platformUUID}}\",\n\t\"name\": \"Test platform - modified: {{platformUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/platforms/{{platformUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"platforms",
								"{{platformUUID}}"
							]
						},
						"description": "Update a deleted platform"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"// Clear out the previously set token as it may be expired or invalid",
							"// by the time this test runs again, since it is stored in an",
							"// environment variable.",
							"if (pm.variables.has(\"auth_complete\") === false) {",
							"    pm.environment.unset(\"xokapitoken-platforms\");",
							"}",
							"",
							"// Acquire a valid auth token",
							"if (pm.environment.has(\"xokapitoken-platforms\") === false) {",
							"    pm.sendRequest({",
							"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"        method: 'POST',",
							"        header: {",
							"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"        }",
							"    }, function(err, res) {",
							"        if (err !== null) {",
							"            console.log(\"Login error: \" + err);",
							"        } else {",
							"            if (res.code === 201) {",
							"                pm.environment.set(\"xokapitoken-platforms\", res.headers.get(\"X-Okapi-Token\"));",
							"                pm.variables.set(\"auth_complete\", \"true\");",
							"            } else {",
							"                console.log(\"Login failed: \" + res.reason());",
							"            }",
							"        }",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fca30909-e0e1-41ed-b515-ec8220c2dabe",
				"type": "text/javascript",
				"exec": [
					"eval(pm.variables.get(\"retrieveSchemaFunction\"));",
					"",
					"if (pm.variables.has(\"platform.schema\") === false) {",
					"    retrieveSchema(\"platform.json\", function(err, res) {",
					"        pm.variables.set(\"platform.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"platforms.schema\") === false) {",
					"    retrieveSchema(\"platforms.json\", function(err, res) {",
					"        pm.variables.set(\"platforms.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"error.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"error.schema\", function(err, res) {",
					"        pm.variables.set(\"error.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"parameters.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"parameters.schema\", function(err, res) {",
					"        pm.variables.set(\"parameters.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"errors.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"errors.schema\", function(err, res) {",
					"        pm.variables.set(\"errors.schema\", res);",
					"    });",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8b3e72ff-9550-41f7-935e-de6c849e2a21",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c0b1cdf4-e2a4-4184-88f9-5d94e31cb2dd",
			"key": "mod-inventory-storage_version",
			"value": "v8.0.0",
			"type": "string",
			"description": ""
		},
		{
			"id": "b29a0bca-9052-441f-bff7-2f093476cff1",
			"key": "raml-utils_version",
			"value": "9ae1be43edb410c29e422d56e6dcb12f961d1673",
			"type": "string",
			"description": ""
		},
		{
			"id": "dbc1f15e-1ab6-4d78-b7e9-ddd93b1616fa",
			"key": "retrieveSchemaFunction",
			"value": "var retrieveSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/mod-inventory-storage/\" + pm.variables.get(\"mod-inventory-storage_version\") + \"/ramls/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};\n\nvar retrieveRAMLUtilsSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/raml/\" + pm.variables.get(\"raml-utils_version\") + \"/schemas/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};",
			"type": "string",
			"description": ""
		}
	]
}